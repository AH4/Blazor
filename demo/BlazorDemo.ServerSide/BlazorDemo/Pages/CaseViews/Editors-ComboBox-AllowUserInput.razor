@inherits DemoWithResizableComponent

<div class="demo-description" id="AllowInput">
    <h2><DemoNavLink Link="ComboBox#AllowInput" />ComboBox - Allow Input</h2>
    <p>
        The <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.Base.DxComboBoxBase-1.AllowUserInput">AllowUserInput</a> property specifies whether users are allowed to input values into an editor's edit box. The following property values are available:
    </p>
    <ul>
        <li><b>true</b> - A user can either select an item from the drop-down list or enter new values into the edit box (without the need to invoke the drop-down list).</li>
        <li><b>false</b> - A user can only select an item from the drop-down list.</li>
    </ul>
    <p>
        In this demo, the <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.Base.DxComboBoxBase-1.AllowUserInput">AllowUserInput</a> property is set to <b>true</b>.
    </p>
</div>

<div class="card demo-card demo-card-shadow">
    <div class="card-header">
        @{ 
            string selectedItemTitle = SelectedItem == null ? "null" : SelectedItem;
        }
        <DemoToolbar @bind-SelectedSize="SizeMode">
            <TitleTemplate>
                Selected item: <b>@(SelectedItem == null ? "null" : SelectedItem)</b>, Text = <b>@Text</b>
            </TitleTemplate>
        </DemoToolbar>
    </div>
    <div class="card-body mw-480">
        <DxComboBox Data="@Cities"
                    AllowUserInput="true"
                    NullText="Select City ..."
                    @bind-SelectedItem="@SelectedItem"
                    @bind-Text="@Text"
                    SizeMode="SizeMode">
        </DxComboBox>
    </div>
</div>

<div class="code-snippet card demo-card-wide">
    <CodeSnippetHeader></CodeSnippetHeader>
    <div class="card-footer text-muted">
        <CodeSnippet_Editors_ComboBox_AllowUserInput></CodeSnippet_Editors_ComboBox_AllowUserInput>
    </div>
</div>

@code {
    IEnumerable<string> Cities = new List<string>() {
        "London",
        "Berlin",
        "Paris",
    };

    string text = "New York";
    string Text { get => text; set { text = value; InvokeAsync(StateHasChanged); } }

    string selectedItem = null;
    string SelectedItem { get => selectedItem; set { selectedItem = value; InvokeAsync(StateHasChanged); } }
}
