@inherits LayoutComponentBase
@implements IDisposable

@inject Microsoft.AspNetCore.Components.IUriHelper UriHelper
@inject IJSRuntime JSRuntime
@inject Microsoft.AspNetCore.Components.IComponentContext ComponentContext

@using Microsoft.JSInterop;

<div class="sidebar">
    <div class="top-row logo-container pl-4 navbar-dark bg-light text-body">
        <button class="navbar-toggler" @onclick="@ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
        <span class="logo-image" />
        <div class="@($"theme-settings-collapsed { ThemeSwitcherShown }")">
            <a class="nav-item nav-link" @onclick="@ToggleThemeSwitcherPanel" href="javascript:void(0);">
                <span class="oi oi-cog"></span>
            </a>
        </div>
    </div>
    <div class="@NavMenuCssClass">
        <NavMenu />
    </div>
</div>

<div class="main">
    <div class="top-row bg-light text-body px-4" id="navbar">
        <div class="logo">
            <h5 class="caption">Online Demos - DevExpress UI for Blazor (CTP)</h5>
        </div>
        <div class="@($"theme-settings { ThemeSwitcherShown }")">
            <a class="nav-item nav-link" @onclick="@ToggleThemeSwitcherPanel" href="javascript:void(0);">
                <span class="oi oi-cog"></span>
            </a>
        </div>
    </div>

    <ThemeSwitcher @bind-Shown="@ThemeSwitcherShown"></ThemeSwitcher>

    <div class="content px-4">
        @Body
    </div>
</div>

@code {
    bool collapseNavMenu = true;

    bool navigationToTargetAllowed = true;

    string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
        ThemeSwitcherShown = false;
    }

    bool themeSwitcherShown = false;
    bool ThemeSwitcherShown {
        get => themeSwitcherShown;
        set {
            themeSwitcherShown = value;
            navigationToTargetAllowed = false;
            InvokeAsync(StateHasChanged); }
    }

    void ToggleThemeSwitcherPanel()
    {
        ThemeSwitcherShown = !ThemeSwitcherShown;
        if (ThemeSwitcherShown)
        {
            collapseNavMenu = true;
        }
    }

    string UriFragment { get; set; } = "";

    void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        UriFragment = UriHelper.ToAbsoluteUri(args.Location).Fragment;
        if (!collapseNavMenu)
        {
            collapseNavMenu = true;
            InvokeAsync(StateHasChanged);
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        UriHelper.OnLocationChanged += OnLocationChanged;
    }

    protected override Task OnAfterRenderAsync()
    {
        if (navigationToTargetAllowed && ComponentContext.IsConnected)
        {
            JSRuntime.InvokeAsync<string>("ScrollToTarget", UriFragment);
        }
        navigationToTargetAllowed = true;
        return base.OnAfterRenderAsync();
    }

    void IDisposable.Dispose()
    {
        UriHelper.OnLocationChanged -= OnLocationChanged;
    }
}
