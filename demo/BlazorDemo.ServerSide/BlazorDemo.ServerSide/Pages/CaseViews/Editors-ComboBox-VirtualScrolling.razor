@page "/ComboBoxVirtualScrolling"

<div class="demo-description" id="VirtualScrolling">
    <h2><NavLink class="demo-anchor" href="ComboBox#VirtualScrolling" />ComboBox - Virtual Scrolling</h2>
    <p>
        The <b>ListRenderMode</b> property specifies how the ComboBox loads the item list. 
    </p>
    <ul>
        <li><b>Entire</b> - The ComboBox loads the entire item list. This option is suitable for small item lists where scrolling should work instantly.</li>
        <li><b>Virtual</b> - The ComboBox loads visible items only. This approach improves performance when the list is too heavy to load at a time.</li>
    </ul>
    <p>
        In this demo, the <b>ListRenderMode</b> property is set to <b>ListRenderMode.Virtual</b>.
    </p>
</div>

<div class="card demo-card">
    <div class="card-header">SelectedItem = <b>@(SelectedItem != null ? SelectedItem : "null")</b></div>
    <div class="card-body mw-480" style="height: 280px;">
        <DxComboBox Data="@Strings"
                    ListRenderMode="@ListRenderMode.Virtual"
                    FilteringMode="@DataGridFilteringMode.Contains"
                    @bind-SelectedItem="@SelectedItem"
                    @bind-DropDownVisible="@DropDownVisible">

        </DxComboBox>
    </div>
</div>

<div class="code-snippet card demo-card-wide">
    <CodeSnippetHeader></CodeSnippetHeader>
    <div class="card-footer text-muted ">
        <CodeSnippet_ComboBox_VirtualScrolling></CodeSnippet_ComboBox_VirtualScrolling>
    </div>
</div>

@code {
	string selectedItem = null;
    string SelectedItem { get => selectedItem; set { selectedItem = value; InvokeAsync(StateHasChanged); } }

    List<string> Strings = new List<string>();
    protected override void OnInitialized()
    {
        for(int i = 0; i < 1000; i++ )
            Strings.Add($"Option #{i}");
    }

    bool dropDownVisible = true;
    bool DropDownVisible { get => dropDownVisible; set { dropDownVisible = value; InvokeAsync(StateHasChanged); }  }
}