@page "/ChartCustomization"
@using Demo.Blazor
@using Demo.Blazor.Model
@using DevExpress.Blazor
@using Demo.Blazor.Services
@inject WeatherForecastService ForecastService
<div class="demo-description" id="Tooltip">
    <h2><DemoNavLink Link="ChartCustomization#Tooltip" />Charts - Tooltip Customization</h2>
    <p>
        The <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxChartTooltip">DxChartTooltip</a> component enables you to specify templates for the tooltips that are displayed when the mouse hovers over a chart series.
        A <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.ChartTooltipData">ChartTooltipData</a> type object represents the template’s context.
        This object provides information about the hovered series point.
    </p>
</div>

<DxChart Data="@SalesData">
    <DxChartTitle Text="Sales amount" />
    <DxChartTooltip>
        <div class="p-3">
            <p class="text-align-center"><b>@context.Point.SeriesName</b></p>
            <p>City: @context.Point.Argument</p>
            <p>Amout: @context.Point.Value</p>
        </div>
    </DxChartTooltip>
    <DxChartBarSeries Name="2013" Filter="@((SaleInfo s) => s.Date.Year == 2013)" AggregationMethod="@Enumerable.Sum" ArgumentField="@(s => s.City)" ValueField="@(s => s.Amount)"></DxChartBarSeries>
    <DxChartBarSeries Name="2014" Filter="@((SaleInfo s) => s.Date.Year == 2014)" AggregationMethod="@Enumerable.Sum" ArgumentField="@(s => s.City)" ValueField="@(s => s.Amount)"></DxChartBarSeries>
    <DxChartLineSeries Name="2015" Filter="@((SaleInfo s) => s.Date.Year == 2015)" AggregationMethod="@Enumerable.Sum" ArgumentField="@(s=> s.City)" ValueField="@(s => s.Amount)"></DxChartLineSeries>
</DxChart>
<CodeSnippet_Charts_TooltipCustomization />

<div class="demo-description" id="Legend">
    <h2><DemoNavLink Link="ChartCustomization#Legend" />Charts - Legend Customization</h2>
    <p>
        The <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxChartSeriesLegendItem">DxChartSeriesLegendItem</a> component in a chart series’ markup allows you to customize a legend item’s appearance.
        This component allows you to change a legend item’s position and visibility.
        You can also customize the legend item text via the <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxChartSeriesLegendItem.Text">Text</a> and <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxChartSeriesLegendItem.TextTemplate">TextTemplate</a> properties.

        To show and hide series when a user clicks the corresponding legend item, set the <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxChartLegend.AllowToggleSeries">AllowToggleSeries</a> property to <b>true</b>.
    </p>
</div>

<DxChart Data="@SalesData">
    <DxChartTitle Text="Sales amount">
        <DxChartSubTitle Text="by cities" />
    </DxChartTitle>
    <DxChartBarSeries Name="2013" Filter="@((SaleInfo s) => s.Date.Year == 2013)" AggregationMethod="@Enumerable.Sum" ArgumentField="@(s => s.City)" ValueField="@(s => s.Amount)"></DxChartBarSeries>
    <DxChartBarSeries Name="2014" Filter="@((SaleInfo s) => s.Date.Year == 2014)" AggregationMethod="@Enumerable.Sum" ArgumentField="@(s => s.City)" ValueField="@(s => s.Amount)"></DxChartBarSeries>
    <DxChartLineSeries Name="2015" Filter="@((SaleInfo s) => s.Date.Year == 2015)" AggregationMethod="@Enumerable.Sum" ArgumentField="@(s=> s.City)" ValueField="@(s => s.Amount)">
        <DxChartSeriesLegendItem IconCssClass="oi oi-flag">
            <TextTemplate>Last year</TextTemplate>
        </DxChartSeriesLegendItem>
    </DxChartLineSeries>
    <DxChartLegend AllowToggleSeries="true" Orientation="@Orientation.Vertical" HorizontalAlignment="@HorizontalAlignment.Right">
        <DxChartTitle Text="Years">
            <DxChartSubTitle Text="(2013-2015)"></DxChartSubTitle>
        </DxChartTitle>
    </DxChartLegend>
</DxChart>
<CodeSnippet_Charts_LegendCustomization />

<div class="demo-description" id="MultipleAxes">
    <h2><DemoNavLink Link="ChartCustomization#MultipleAxes" />Charts - Multiple Axes Customization</h2>
    <p>
        The <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxChart-1">Chart</a> component allows you to display charts with multiple axes and combine several charts.
    </p>
</div>
<DxChart Data="@SalesData">
    <DxChartTitle Text="Sales amount" />
    <DxChartLegend Position="@RelativePosition.Outside" />
    <DxChartValueAxis>
        <DxChartAxisLabel Format="@ChartAxisLabelFormat.Decimal"></DxChartAxisLabel>
        <DxChartAxisTitle Text="Amount"></DxChartAxisTitle>
    </DxChartValueAxis>
    <DxChartValueAxis Name="TotalAxis" Position="@HorizontalEdge.Right">
        <DxChartAxisTitle Text="Total Amount"></DxChartAxisTitle>
    </DxChartValueAxis>
    <DxChartArgumentAxis>
        <DxChartAxisTitle Text="Cities"></DxChartAxisTitle>
    </DxChartArgumentAxis>
    <DxChartFullStackedBarSeries Name="2013" Filter="@((SaleInfo s) => s.Date.Year == 2013)" AggregationMethod="@Enumerable.Sum" ArgumentField="@(s => s.City)" ValueField="@(s => s.Amount)" />
    <DxChartFullStackedBarSeries Name="2014" Filter="@((SaleInfo s) => s.Date.Year == 2014)" AggregationMethod="@Enumerable.Sum" ArgumentField="@(s => s.City)" ValueField="@(s => s.Amount)" />
    <DxChartFullStackedBarSeries Name="2015" Filter="@((SaleInfo s) => s.Date.Year == 2015)" AggregationMethod="@Enumerable.Sum" ArgumentField="@(s=> s.City)" ValueField="@(s => s.Amount)" />
    <DxChartSplineSeries Name="Total" AggregationMethod="@Enumerable.Sum" ArgumentField="@((SaleInfo s)=> s.City)" ValueField="@(s => s.Amount)" Axis="TotalAxis" />
</DxChart>
<CodeSnippet_Charts_MultipleAxesCustomization />

<div class="demo-description" id="MultiplePanes">
    <h2><DemoNavLink Link="ChartCustomization#MultiplePanes" />Charts - Multiple Panes Customization</h2>
    <p>
        The <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxChart-1">Chart</a> component allows you to create charts with multiple panes located under each other.
        A pane can display one or more series and can share the argument axis with other panes.
    </p>
</div>
<DxChart Data="@WeatherForecasts">
    <DxChartTitle Text="@($"Temperature in {DateTime.Now.ToString("MMMM")}")" />
    <DxChartLegend Position="@RelativePosition.Outside" VerticalAlignment="@VerticalEdge.Bottom" />
    <DxChartPane Name="TopPane" />
    <DxChartPane Name="BottomPane" />
    <DxChartLineSeries Pane="TopPane" Name="Average Temperature, C" AggregationMethod="@((v) => (int)Enumerable.Average(v))" ArgumentField="@(s => s.Date.ToShortDateString())" ValueField="@((WeatherForecast s) => s.TemperatureC)">
        <DxChartSeriesLabel Visible="true" />
    </DxChartLineSeries>
    <DxChartBarSeries Pane="BottomPane" Name="Max Temperature, C" AggregationMethod="@((v) => (int)Enumerable.Max(v))" ArgumentField="@(s => s.Date.ToShortDateString())" ValueField="@((WeatherForecast s) => s.TemperatureC)">
        <DxChartSeriesLabel Visible="true" />
    </DxChartBarSeries>
    <DxChartBarSeries Pane="BottomPane" Name="Min Temperature, C" AggregationMethod="@((v) => (int)Enumerable.Min(v))" ArgumentField="@(s => s.Date.ToShortDateString())" ValueField="@((WeatherForecast s) => s.TemperatureC)">
        <DxChartSeriesLabel Visible="true" />
    </DxChartBarSeries>
</DxChart>
<CodeSnippet_Charts_MultiplePanesCustomization />

<div class="demo-description" id="AxisTypes">
    <h2>
        <DemoNavLink Link="ChartCustomization#AxisTypes" />Charts - Axes Type Customization<span class="demo-badge badge badge-success">New</span>
    </h2>
    <p>
        The <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxChart-1">Chart</a> component automatically detects the first series’ data type and uses it to render X (argument) and Y (value) axes. If the data range or format is series specific, each series can use its own Y axis. The number of Chart's Y axes is not limited.
    </p>
    <p>
        To change the type of an axis, use its <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxChartArgumentAxis.Type">Type</a> property. The following axis types are available:
        <ul>
            <li>
                <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.ChartAxisType">Auto</a> (Default) - For integer and float data types, displays numeric arguments/values divided by ticks (the <b>Continuous</b> type). For other data types, displays discrete arguments/values that correspond to chart points (the <b>Discrete</b> type).
            </li>
            <li>
                <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.ChartAxisType">Continuous</a> - Displays numeric arguments/values divided by ticks.
            </li>
            <li>
                <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.ChartAxisType">Discrete</a> - Displays discrete arguments/values that correspond to chart points.
            </li>
            <li>
                <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.ChartAxisType">Logarithmic</a> - Displays numeric arguments/values that grow exponentially. Each axis argument/value equals to the <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxChartArgumentAxis.LogarithmBase">LogarithmBase</a> value raised to some power. For example, if <b>LogarithmBase</b> is set to 10, the following arguments/values are displayed: 10<sup>-2</sup>, 10<sup>-1</sup>, 10<sup>0</sup>, 10<sup>1</sup>, 10<sup>2</sup>, etc. This type is useful when you need to visualize a dataset of rapidly-growing values.
            </li>
        </ul>
    </p>
    <p>
        In this demo, two Chart components display argument axes of the <b>Discrete</b> type, and value axes of <b>Continuous</b> and <b>Logarithmic</b> types, respectively. The <b>LogarithmBase</b> property for the second chart is set to 2.
    </p>
</div>
<div style="display: flex; flex-wrap: wrap; align-items: baseline; justify-content: space-evenly; min-width: 500px;">
    <div>
        <DxChart Data="@GetData()">
            <DxChartTitle Text="@($"The loudness of sounds (continuous value axis)")" />
            <DxChartLegend Visible="false" />
            <DxChartArgumentAxis Type="@ChartAxisType.Discrete" />
            <DxChartValueAxis Type="@ChartAxisType.Continuous" />
            <DxChartLineSeries ArgumentField="@((DataPoint s) => s.Argument)" ValueField="@((DataPoint s) => s.Value)" />
        </DxChart>
    </div>
    <div>
        <DxChart Data="@GetData()">
            <DxChartTitle Text="@($"The loudness of sounds (logarithmic value axis)")" />
            <DxChartLegend Visible="false" />
            <DxChartArgumentAxis Type="@ChartAxisType.Discrete" />
            <DxChartValueAxis Type="@ChartAxisType.Logarithmic" LogarithmBase="2" />
            <DxChartLineSeries ArgumentField="@((DataPoint s) => s.Argument)" ValueField="@((DataPoint s) => s.Value)" />
        </DxChart>
    </div>
</div>
<CodeSnippet_Charts_AxesTypes />

@code {
    IQueryable<SaleInfo> SalesData;
    WeatherForecast[] WeatherForecasts;

    protected override async Task OnInitializedAsync() {
        SalesData = await Sales.Load();
        WeatherForecasts = await ForecastService.GetDetailedForecastAsync();
    }

    List<DataPoint> GetData() {
        List<DataPoint> result = new List<DataPoint>(9);
        result.Add(new DataPoint("Whisper", 0.15));
        result.Add(new DataPoint("Street noise", 8));
        result.Add(new DataPoint("Jackhummer", 32));
        result.Add(new DataPoint("Subway train", 64));
        result.Add(new DataPoint("Loud music", 128));
        result.Add(new DataPoint("Pain threshold", 256));
        result.Add(new DataPoint("Buzzer", 512));
        result.Add(new DataPoint("Rocket start", 2048));
        result.Add(new DataPoint("Deadly level", 16348));
        return result;
    }

    struct DataPoint {
        public DataPoint (string argument, double value) { Argument = argument; Value = value; }
        public string Argument { get; set; }
        public double Value { get; set; }
    }
}