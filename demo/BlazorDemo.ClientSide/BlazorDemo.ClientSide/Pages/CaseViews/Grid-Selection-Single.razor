@using Demo.Blazor.Model
@using Demo.Blazor.Services
@inject FlatProductService FlatProductService

<div class="demo-description">
    <h2>Data Grid - Single Row Selection</h2>
    <p>The Data Grid component allows users to click a row to select it. Use the <b>SingleSelectedDataRow</b> property to specify the selected data row in code. To track selection changes in this mode, use the <b>SingleSelectedDataRowChanged</b> event or the two-way synchronization as demonstrated in this module.</p>
</div>

@if (DataSource == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card demo-card-wide border-bottom-0">
        <div class="card-header border-bottom-0">Selected Product: <b>@(SelectedProduct == null ? "(none)" : SelectedProduct.ProductName)</b></div>
    </div>

    <DxDataGrid Data="@DataSource"
        @bind-SingleSelectedDataRow="@SelectedProduct"
        ShowFilterRow="false">
        <DxDataGridColumn Field="@nameof(ProductFlat.ProductName)" Caption="Product Name"></DxDataGridColumn>
        <DxDataGridColumn Field="@nameof(ProductFlat.Category)"></DxDataGridColumn>
        <DxDataGridColumn Field="@nameof(ProductFlat.Subcategory)"></DxDataGridColumn>
    </DxDataGrid>

    <div class="code-snippet card demo-card-wide">
        <CodeSnippetHeader></CodeSnippetHeader>
        <div class="card-footer text-muted">
            <CodeSnippet_Grid_Selection_Single />
        </div>
    </div>
}

@code {
    IQueryable<ProductFlat> DataSource;

    ProductFlat selectedProduct;
    public ProductFlat SelectedProduct
    {
        get
        {
            return selectedProduct;
        }
        set
        {
            selectedProduct = value;
            InvokeAsync(StateHasChanged);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        DataSource = await FlatProductService.Load();
        SelectedProduct = DataSource.First();
    }
}