@page "/ChartSeriesTypes"
@using Demo.Blazor
@using Demo.Blazor.Model
@using DevExpress.Blazor
@using System.Drawing
<div class="demo-description">
    <h2>Charts - Series Types</h2>
</div>
<div class="demo-charts-seriestypes card-deck mb-lg-3 pb-lg-3">
    <div class="card">
        <div class="card-body d-flex flex-row">
            <h5 class="card-title mr-3">Line Series</h5>
            <DxComboBox CssClass="ml-auto" Data="@LineSeriesTypes" @bind-SelectedItem="@LineSeriesType"></DxComboBox>
        </div>
        <div class="card-body">
            <DxChart Data="@ChartsData">
                <DxChartCommonSeries NameField="@((SaleInfo s) => s.Date.Year)" ArgumentField="@((SaleInfo s) => s.City)" ValueField="@((SaleInfo s) => s.Amount)" SeriesType="@LineSeriesType">
                </DxChartCommonSeries>
                <DxChartLegend Position="@RelativePosition.Outside" HorizontalAlignment="@HorizontalAlignment.Right" />
            </DxChart>
        </div>
        <div class="card-body">
            <p class="card-text">
                Line chart series visualize data trends over specified intervals.
                In this example, you can switch between the Line, Stacked Line, and Full Stacked Line series types.
                Stacked Line series visualize multiple series and shows each series’ contribution to the total aggregate value for specific arguments.
                Full Stacked Line series display the percentage value of multiple line series for each argument.
            </p>
        </div>
    </div>
    <div class="card">
        <div class="card-body d-flex flex-row">
            <h5 class="card-title mr-3">Area Series</h5>
            <DxComboBox CssClass="ml-auto" Data="@AreaSeriesTypes" @bind-SelectedItem="@AreaSeriesType"></DxComboBox>
        </div>
        <div class="card-body">
            <DxChart Data="@ChartsData">
                <DxChartCommonSeries NameField="@((SaleInfo s) => s.Date.Year)" ArgumentField="@((SaleInfo s) => s.City)" ValueField="@((SaleInfo s) => s.Amount)" SeriesType="@AreaSeriesType">
                </DxChartCommonSeries>
                <DxChartLegend Position="@RelativePosition.Outside" HorizontalAlignment="@HorizontalAlignment.Right" />
            </DxChart>
        </div>
        <div class="card-body">
            <p class="card-text">
                Area series can be used to emphasize change in values.
                In this example, you can switch between the Area, Stacked Area, and Full Stacked Area series types.
                Stacked Area series visualize multiple series and allow users to determine how a series constitutes the total aggregate value for specific arguments.
                The Full Stacked Area series display the percentage value of multiple area series for each argument.
            </p>
        </div>
    </div>
</div>
<div class="demo-charts-seriestypes card-deck mb-3">
    <div class="card">
        <div class="card-body d-flex flex-row">
            <h5 class="card-title mr-3">Bar Series</h5>
            <DxComboBox CssClass="ml-auto" Data="@BarSeriesTypes" @bind-SelectedItem="@BarSeriesType"></DxComboBox>
        </div>
        <div class="card-body">
            <DxChart Data="@ChartsData">
                <DxChartCommonSeries NameField="@((SaleInfo s) => s.Date.Year)" ArgumentField="@((SaleInfo s) => s.City)" ValueField="@((SaleInfo s) => s.Amount)" SeriesType="@BarSeriesType">
                </DxChartCommonSeries>
                <DxChartLegend Position="@RelativePosition.Outside" HorizontalAlignment="@HorizontalAlignment.Right" />
            </DxChart>
        </div>
        <div class="card-body">
            <p class="card-text">
                Bar series are used to display values in different discrete categories such as months, countries, age, etc.
                In this example, you can switch between the Bar, Stacked Bar, and Full Stacked Bar series types.
                Stacked Bar series are used when you need to display several series that represent values for discrete categories.
                The Full Stacked Bar series show the value percentage of several bar series for each argument.
            </p>
        </div>
    </div>
    <div class="card">
        <div class="card-body d-flex flex-row">
            <h5 class="card-title">Bubble Series</h5>
        </div>
        <div class="card-body">
            <DxChart Data="@ChartsData">
                <DxChartCommonSeries NameField="@((SaleInfo s) => s.Country)" Filter="@(s => s.Region == "North America")" 
                                     ArgumentField="@(s => s.Date.DayOfWeek.ToString())" 
                                     ValueField="@(s => s.Date.Year.ToString())" SeriesType="@ChartSeriesType.Bubble">
                    <SeriesTemplate>
                        <DxChartBubbleSeries 
                                             Settings="@context" 
                                             SizeField="@(s => s.Amount)"
                                             Color="@(context.GroupKey == "Canada" ? Color.FromArgb(252, 58, 48) : Color.FromArgb(208, 208, 208))" 
                                             AggregationMethod="@Enumerable.Max" />
                    </SeriesTemplate>
                </DxChartCommonSeries>
                <DxChartLegend Position="@RelativePosition.Outside" HorizontalAlignment="@HorizontalAlignment.Right" />
                <DxChartValueAxis>
                    <DxChartAxisLabel Format="@ChartAxisLabelFormat.FixedPoint"></DxChartAxisLabel>
                </DxChartValueAxis>
            </DxChart>
        </div>
        <div class="card-body">
            <p class="card-text">
                Bubble series allow you to visualize a data set with three dimensions: coordinates on the axes specify the first two dimensions; the size of the bubble the third.
            </p>
        </div>
    </div>
</div>
@code {
    ChartSeriesType lineSeriesType = ChartSeriesType.Line;
    ChartSeriesType areaSeriesType = ChartSeriesType.SplineArea;
    ChartSeriesType barSeriesType = ChartSeriesType.Bar;

    ChartSeriesType LineSeriesType { get => lineSeriesType; set { lineSeriesType = value; InvokeAsync(StateHasChanged); } }
    ChartSeriesType AreaSeriesType { get => areaSeriesType; set { areaSeriesType = value; InvokeAsync(StateHasChanged); } }
    ChartSeriesType BarSeriesType { get => barSeriesType; set { barSeriesType = value; InvokeAsync(StateHasChanged); } }

    IEnumerable<ChartSeriesType> LineSeriesTypes = new ChartSeriesType[] {
        ChartSeriesType.Line, ChartSeriesType.StepLine, ChartSeriesType.StackedLine, ChartSeriesType.FullStackedLine
    };
    IEnumerable<ChartSeriesType> AreaSeriesTypes = new ChartSeriesType[] {
        ChartSeriesType.Area, ChartSeriesType.FullStackedArea, ChartSeriesType.FullStackedSplineArea, ChartSeriesType.SplineArea,
        ChartSeriesType.StackedArea, ChartSeriesType.StackedSplineArea, ChartSeriesType.StepArea
    };
    IEnumerable<ChartSeriesType> BarSeriesTypes = new ChartSeriesType[] {
        ChartSeriesType.Bar, ChartSeriesType.FullStackedBar, ChartSeriesType.StackedBar
    };

    IQueryable<SaleInfo> ChartsData;

    protected override async Task OnInitializedAsync() {
        ChartsData = await Sales.Load();
    }
}