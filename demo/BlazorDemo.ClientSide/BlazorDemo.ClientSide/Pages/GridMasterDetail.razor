@page "/GridMasterDetail"

@using Demo.Blazor.Model
@using Demo.Blazor.Services
@inject FlatProductService FlatProductService

<div class="demo-description">
    <h2>Data Grid - Master-Detail View</h2>
    <p>
        The <b>DxDataGrid</b> component allows you to build master-detail layouts of any complexity and depth with a detail row template. This template defines the way detail data is presented.
    </p>
    <p>
        This demo module illustrates how to use a nested grid component to visualize a master-detail relationship between two data tables. To do this, follow the steps below.
    </p>
    <ol>
        <li>Add two <b>DxDataGrid</b> components to your application.</li>
        <li>Bind the first grid (master) to a master data source and enable its <b>ShowDetailRow</b> property.</li>
        <li>Bind the second grid (detail) to a detail data source that uses the template's context object as a filter criterion.</li>
        <li>(Optional) To automatically collapse an expanded detail row when a new detail row is displayed, set the <b>AutoCollapseDetailRow</b> property to true.</li>
    </ol>
    <p>
        Create a <b>DetailRowTemplate</b> template for the master grid and add the detail grid to this template.
    </p>
</div>


<DxDataGrid Data="@ProductCategories.DataSource" AutoCollapseDetailRow="true" SelectionMode="DataGridSelectionMode.None">
    <ChildContent>
        <DxDataGridColumn Field="@nameof(ProductCategory.ProductSubcategoryID)" Caption="ID" AllowSort="@DefaultBoolean.False" Width="50px"></DxDataGridColumn>
        <DxDataGridColumn Field="@nameof(ProductCategory.Subcategory)" SortOrder="@DataGridColumnSortOrder.Descending" SortIndex="0"></DxDataGridColumn>
        <DxDataGridColumn Field="@nameof(ProductCategory.Category)" SortOrder="@DataGridColumnSortOrder.Ascending" SortIndex="1"></DxDataGridColumn>
    </ChildContent>
    <DetailRowTemplate>
        <div class="card border-0">
            <div class="card-body">
                <h5 class="card-title">Available Products</h5>
                <div>
                    <DxDataGrid ShowPager="false" PageSize="10" SelectionMode="DataGridSelectionMode.None" Data="@ProductsDataSource.Where(x => x.ProductCategoryId == context.ProductSubcategoryID && x.Availability)">
                        <ChildContent>
                            <DxDataGridColumn Field="@nameof(ProductFlat.Id)" Caption="ID" AllowSort="@DefaultBoolean.False" Width="50px"></DxDataGridColumn>
                            <DxDataGridColumn Field="@nameof(ProductFlat.ProductName)" SortOrder="@DataGridColumnSortOrder.Descending" SortIndex="0"></DxDataGridColumn>
                            <DxDataGridColumn Field="@nameof(ProductFlat.Subcategory)" SortOrder="@DataGridColumnSortOrder.Ascending" SortIndex="1"></DxDataGridColumn>
                        </ChildContent>
                    </DxDataGrid>
                </div>
            </div>
        </div>
    </DetailRowTemplate>
</DxDataGrid>
<div class="code-snippet card demo-card-wide">
    <CodeSnippetHeader></CodeSnippetHeader>
    <div class="card-footer text-muted ">
        <CodeSnippet_Grid_MasterDetail></CodeSnippet_Grid_MasterDetail>
    </div>
</div>


@code {
    IQueryable<ProductFlat> ProductsDataSource;

    protected override async Task OnInitializedAsync()
    {
        ProductsDataSource = await FlatProductService.Load();
    }
}