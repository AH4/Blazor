@using Demo.Blazor.Model

<div class="demo-description" id="NullText">
    <h2>ComboBox - NullText</h2>
    <p>
        This example illustrates how to use the <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.Base.DxComboBoxBase-1.NullText">NullText</a> property to display prompt text (watermark) in the editor when it is empty.  The editor can be set to NULL if its data type is nullable. The code below demonstrates how to bind the ComboBox’s selected item collection to a nullable object (SelectedOption).
    </p>
    <p>
        The ComboBox can also display a <b>Clear</b> button that clears the editor’s value (set it to NULL) when the corresponding data source collection does not include a null value. To show the Clear button in the ComboBox, set the
        <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.Base.DxComboBoxBase-1.ClearButtonDisplayMode">ClearButtonDisplayMode</a> property to
        <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DataEditorClearButtonDisplayMode.Auto">DataEditorClearButtonDisplayMode.Auto</a>.
    </p>
</div>

<div class="card demo-card">
    <div class="card-header">Option Selected: <b>@(SelectedOption != null ? SelectedOption.Text : "null" )</b></div>
    <div class="card-body mw-480" style="height: 210px">
        <DxComboBox NullText="Select an option..."
                    Data="@DataSource"
                    @bind-SelectedItem="@SelectedOption"
                    @bind-DropDownVisible="@DropDownVisible"
                    TextFieldName="Text"
                    ClearButtonDisplayMode="@DataEditorClearButtonDisplayMode.Auto"></DxComboBox>
    </div>
</div>

<div class="code-snippet card demo-card-wide">
    <CodeSnippetHeader></CodeSnippetHeader>
    <div class="card-footer text-muted ">
        <CodeSnippet_Editor_ComboBox_NullText></CodeSnippet_Editor_ComboBox_NullText>
    </div>
</div>

@code {
    class Options {
        public int Id { get; set; }
        public string Text { get; set; }
    }
    Options selectedOption;
    Options SelectedOption { get => selectedOption; set { selectedOption = value; InvokeAsync(StateHasChanged) ;} }

    List<Options> DataSource = new List<Options>() {
        new Options() { Id = 0, Text = "Option 1" },
        new Options() { Id = 0, Text = "Option 2" },
        new Options() { Id = 0, Text = "Option 3" },
        };

    bool dropDownVisible = true;
    bool DropDownVisible { get => dropDownVisible; set { dropDownVisible = value; InvokeAsync(StateHasChanged); }  }
}
