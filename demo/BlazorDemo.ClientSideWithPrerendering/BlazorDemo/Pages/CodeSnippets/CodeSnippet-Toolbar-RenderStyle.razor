<div class="code-snippet card demo-card-wide">
    <CodeSnippetHeader></CodeSnippetHeader>
    <div class="card-footer text-muted">
        <CodeSnippet>
@(@"<DxToolbar ItemRenderStyleMode=""@SelectedRenderMode"" ItemSizeMode=""@SelectedItemSize"">
    <Items>
        <DxToolbarItem Text=""Info"" RenderStyle=""ButtonRenderStyle.Info"" />
        <DxToolbarItem Text=""Success"" RenderStyle=""ButtonRenderStyle.Success"" />
        <DxToolbarItem IconCssClass=""tb-icon tb-icon-alert"" BeginGroup=""true"" RenderStyle=""ButtonRenderStyle.Danger"" Text=""Danger"" />
        <DxToolbarItem IconCssClass=""tb-icon tb-icon-alert"" Text=""Auto"" />
        <DxToolbarItem IconCssClass=""tb-icon tb-icon-alert"" RenderStyle=""ButtonRenderStyle.Warning"" Text=""Warning"" />
    </Items>
</DxToolbar>

@code{
    IList<ToolbarRenderStyleMode> RenderModes { get; set; }
    ToolbarRenderStyleMode _selectedRenderMode;
    ToolbarRenderStyleMode SelectedRenderMode { get => _selectedRenderMode; set { _selectedRenderMode = value; InvokeAsync(StateHasChanged); } }

    IList<SizeMode> ItemSizes { get; set; }
    SizeMode _selectedItemSize;
    SizeMode SelectedItemSize { get => _selectedItemSize; set { _selectedItemSize = value; InvokeAsync(StateHasChanged); } }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        RenderModes = new List<ToolbarRenderStyleMode>() { ToolbarRenderStyleMode.Contained, ToolbarRenderStyleMode.Plain };
        SelectedRenderMode = RenderModes[0];

        ItemSizes = new List<SizeMode>() { SizeMode.Small, SizeMode.Medium, SizeMode.Large };
        SelectedItemSize = ItemSizes[0];
    }
}
")
        </CodeSnippet>
    </div>
</div>